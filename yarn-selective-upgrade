#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail

NAT='0|[1-9][0-9]*'
ALPHANUM='[0-9]*[A-Za-z-][0-9A-Za-z-]*'
IDENT="$NAT|$ALPHANUM"
FIELD='[0-9A-Za-z-]+'

SEMVER_REGEX="\
^[vV]?\
($NAT)\\.($NAT)\\.($NAT)\
(\\-(${IDENT})(\\.(${IDENT}))*)?\
(\\+${FIELD}(\\.${FIELD})*)?$"

PROG=$(basename "$0")
PROG_VERSION="0.0.1"

# Color variables
color_red='\033[0;31m'
color_green='\033[0;32m'
color_yellow='\033[0;33m'
color_clear='\033[0m'

USAGE="\
Usage:

  $PROG

Arguments:

  -h | --help          Show the script usage help.

  -w | --wizard        Run the command in wizad mode.

  -d | --debug         Run the command in debug mode. No actual upgrade will be made.

  -c | --confirm       Ask confirmation before the upgrade command executed and allow manual input for the targetted upgrade version.

  -u | --upgrade_type  Filter upgrade to specified upgrade type based on semver specification. Possible values: major, minor, patch, release, prerel, build, all. Default is all.

                       Example: ${color_yellow}--upgrade_type patch${color_clear}

  -p | --package_type  Filter upgrade to specified package type. Possible values: dependencies, devDependencies, all. Default is all.

                       Example: ${color_yellow}--package_type dependencies${color_clear}

  -e | --excludes      Filter upgrade to dissallow the upgrade for packages defined in the list. Separate the package name by comma for multiple packages. Use asterisk (*) for wildcard pattern.

                       Example: ${color_yellow}--excludes \"react,react-dom\"${color_clear}

                       Will match \"react\" and \"react-dom\" package.

                       Example: ${color_yellow}--excludes \"@bable/*\"${color_clear}

                       Will match all packages that start with \"@bable/\".

  -i | --includes      Filter upgrade to allow the upgrade only for packages defined in the list. Separate the package name by comma for multiple packages. Use asterisk (*) for wildcard pattern.

                       Example: ${color_yellow}--includes \"react,react-dom\"${color_clear}

                       Will match \"react\" and \"react-dom\" package.

                       Example: ${color_yellow}--includes \"@bable/*\"${color_clear}

                       Will match all packages that start with \"@bable/\".
"

function error {
	echo -e "$1" >&2
	exit 1
}

function usage_help {
	error "$USAGE"
}

function usage_version {
	echo -e "${PROG}: $PROG_VERSION"
	exit 0
}

function validate_version {
	local version=$1
	if [[ "$version" =~ $SEMVER_REGEX ]]; then
		# if a second argument is passed, store the result in var named by $2
		if [ "$#" -eq "2" ]; then
			local major=${BASH_REMATCH[1]}
			local minor=${BASH_REMATCH[2]}
			local patch=${BASH_REMATCH[3]}
			local prere=${BASH_REMATCH[4]}
			local build=${BASH_REMATCH[8]}
			eval "$2=(\"$major\" \"$minor\" \"$patch\" \"$prere\" \"$build\")"
		else
			echo "$version"
		fi
	else
		error "version $version does not match the semver scheme 'X.Y.Z(-PRERELEASE)(+BUILD)'. See help for more information."
	fi
}

function is_nat {
	[[ "$1" =~ ^($NAT)$ ]]
}

function is_null {
	[ -z "$1" ]
}

function order_nat {
	[ "$1" -lt "$2" ] && {
		echo -1
		return
	}
	[ "$1" -gt "$2" ] && {
		echo 1
		return
	}
	echo 0
}

function order_string {
	[[ $1 < $2 ]] && {
		echo -1
		return
	}
	[[ $1 > $2 ]] && {
		echo 1
		return
	}
	echo 0
}

# given two (named) arrays containing NAT and/or ALPHANUM fields, compare them
# one by one according to semver 2.0.0 spec. Return -1, 0, 1 if left array ($1)
# is less-than, equal, or greater-than the right array ($2).  The longer array
# is considered greater-than the shorter if the shorter is a prefix of the longer.
#
function compare_fields {
	local l="$1[@]"
	local r="$2[@]"
	local leftfield=("${!l}")
	local rightfield=("${!r}")
	local left
	local right

	local i=$((-1))
	local order=$((0))

	while true; do
		[ $order -ne 0 ] && {
			echo $order
			return
		}

		: $((i++))
		left="${leftfield[$i]}"
		right="${rightfield[$i]}"

		is_null "$left" && is_null "$right" && {
			echo 0
			return
		}
		is_null "$left" && {
			echo -1
			return
		}
		is_null "$right" && {
			echo 1
			return
		}

		is_nat "$left" && is_nat "$right" && {
			order=$(order_nat "$left" "$right")
			continue
		}
		is_nat "$left" && {
			echo -1
			return
		}
		is_nat "$right" && {
			echo 1
			return
		}
		{
			order=$(order_string "$left" "$right")
			continue
		}
	done
}

# shellcheck disable=SC2206     # checked by "validate"; ok to expand prerel id's into array
function compare_version {
	local order
	validate_version "$1" V
	validate_version "$2" V_

	# compare major, minor, patch

	local left=("${V[0]}" "${V[1]}" "${V[2]}")
	local right=("${V_[0]}" "${V_[1]}" "${V_[2]}")

	order=$(compare_fields left right)
	[ "$order" -ne 0 ] && {
		echo "$order"
		return
	}

	# compare pre-release ids when M.m.p are equal

	local prerel="${V[3]:1}"
	local prerel_="${V_[3]:1}"
	local left=(${prerel//./ })
	local right=(${prerel_//./ })

	# if left and right have no pre-release part, then left equals right
	# if only one of left/right has pre-release part, that one is less than simple M.m.p

	[ -z "$prerel" ] && [ -z "$prerel_" ] && {
		echo 0
		return
	}
	[ -z "$prerel" ] && {
		echo 1
		return
	}
	[ -z "$prerel_" ] && {
		echo -1
		return
	}

	# otherwise, compare the pre-release id's

	compare_fields left right
}

# render_prerel -- return a prerel field with a trailing numeric string
#                  usage: render_prerel numeric [prefix-string]
#
function render_prerel {
	if [ -z "$2" ]; then
		echo "${1}"
	else
		echo "${2}${1}"
	fi
}

# extract_prerel -- extract prefix and trailing numeric portions of a pre-release part
#                   usage: extract_prerel prerel prerel_parts
#                   The prefix and trailing numeric parts are returned in "prerel_parts".
#
PREFIX_ALPHANUM='[.0-9A-Za-z-]*[.A-Za-z-]'
DIGITS='[0-9][0-9]*'
EXTRACT_REGEX="^(${PREFIX_ALPHANUM})*(${DIGITS})$"

function extract_prerel {
	local prefix
	local numeric

	if [[ "$1" =~ $EXTRACT_REGEX ]]; then # found prefix and trailing numeric parts
		prefix="${BASH_REMATCH[1]}"
		numeric="${BASH_REMATCH[2]}"
	else # no numeric part
		prefix="${1}"
		numeric=
	fi

	eval "$2=(\"$prefix\" \"$numeric\")"
}

# bump_prerel -- return the new pre-release part based on previous pre-release part
#                and prototype for bump
#                usage: bump_prerel proto previous
#
function bump_prerel {
	local proto
	local prev_prefix
	local prev_numeric

	# case one: no trailing dot in prototype => simply replace previous with proto
	if [[ ! ("$1" =~ \.$) ]]; then
		echo "$1"
		return
	fi

	proto="${1%.}" # discard trailing dot marker from prototype

	extract_prerel "${2#-}" prerel_parts # extract parts of previous pre-release
	#   shellcheck disable=SC2154
	prev_prefix="${prerel_parts[0]}"
	prev_numeric="${prerel_parts[1]}"

	# case two: bump or append numeric to previous pre-release part
	if [ "$proto" == "+" ]; then # dummy "+" indicates no prototype argument provided
		if [ -n "$prev_numeric" ]; then
			: $((++prev_numeric)) # previous pre-release is already numbered, bump it
			render_prerel "$prev_numeric" "$prev_prefix"
		else
			render_prerel 1 "$prev_prefix" # append starting number
		fi
		return
	fi

	# case three: set, bump, or append using prototype prefix
	if [ "$prev_prefix" != "$proto" ]; then
		render_prerel 1 "$proto" # proto not same pre-release; set and start at '1'
	elif [ -n "$prev_numeric" ]; then
		: $((++prev_numeric)) # pre-release is numbered; bump it
		render_prerel "$prev_numeric" "$prev_prefix"
	else
		render_prerel 1 "$prev_prefix" # start pre-release at number '1'
	fi
}

function command_bump {
	local new
	local version
	local sub_version
	local command

	case $# in
	2) case $1 in
		major | minor | patch | prerel | release)
			command=$1
			sub_version="+."
			version=$2
			;;
		*) usage_help ;;
		esac ;;
	3) case $1 in
		prerel | build)
			command=$1
			sub_version=$2 version=$3
			;;
		*) usage_help ;;
		esac ;;
	*) usage_help ;;
	esac

	validate_version "$version" parts
	# shellcheck disable=SC2154
	local major="${parts[0]}"
	local minor="${parts[1]}"
	local patch="${parts[2]}"
	local prere="${parts[3]}"
	local build="${parts[4]}"

	case "$command" in
	major) new="$((major + 1)).0.0" ;;
	minor) new="${major}.$((minor + 1)).0" ;;
	patch) new="${major}.${minor}.$((patch + 1))" ;;
	release) new="${major}.${minor}.${patch}" ;;
	prerel) new=$(validate_version "${major}.${minor}.${patch}-$(bump_prerel "$sub_version" "$prere")") ;;
	build) new=$(validate_version "${major}.${minor}.${patch}${prere}+${sub_version}") ;;
	*) usage_help ;;
	esac

	echo "$new"
	exit 0
}

function command_compare {
	local v
	local v_

	case $# in
	2)
		v=$(validate_version "$1")
		v_=$(validate_version "$2")
		;;
	*) usage_help ;;
	esac

	set +u # need unset array element to evaluate to null
	compare_version "$v" "$v_"
	exit 0
}

function command_diff {
	validate_version "$1" v1_parts
	# shellcheck disable=SC2154
	local v1_major="${v1_parts[0]}"
	local v1_minor="${v1_parts[1]}"
	local v1_patch="${v1_parts[2]}"
	local v1_prere="${v1_parts[3]}"
	local v1_build="${v1_parts[4]}"

	validate_version "$2" v2_parts
	# shellcheck disable=SC2154
	local v2_major="${v2_parts[0]}"
	local v2_minor="${v2_parts[1]}"
	local v2_patch="${v2_parts[2]}"
	local v2_prere="${v2_parts[3]}"
	local v2_build="${v2_parts[4]}"

	if [ "${v1_major}" != "${v2_major}" ]; then
		echo "major"
	elif [ "${v1_minor}" != "${v2_minor}" ]; then
		echo "minor"
	elif [ "${v1_patch}" != "${v2_patch}" ]; then
		echo "patch"
	elif [ "${v1_prere}" != "${v2_prere}" ]; then
		echo "prerelease"
	elif [ "${v1_build}" != "${v2_build}" ]; then
		echo "build"
	fi
}

# shellcheck disable=SC2034
function command_get {
	local part version

	if [[ "$#" -ne "2" ]] || [[ -z "$1" ]] || [[ -z "$2" ]]; then
		usage_help
		exit 0
	fi

	part="$1"
	version="$2"

	validate_version "$version" parts
	local major="${parts[0]}"
	local minor="${parts[1]}"
	local patch="${parts[2]}"
	local prerel="${parts[3]:1}"
	local build="${parts[4]:1}"
	local release="${major}.${minor}.${patch}"

	case "$part" in
	major | minor | patch | release | prerel | build) echo "${!part}" ;;
	*) usage_help ;;
	esac

	exit 0
}

function command_validate {
	if [[ "$#" -ne "1" ]]; then
		usage_help
	fi

	if [[ "$1" =~ $SEMVER_REGEX ]]; then
		echo "valid"
	else
		echo "invalid"
	fi

	exit 0
}

function match_pattern {
	local needle="$1"
	local list="$2"
	local match="no"

	IFS=','

	read -ra array <<<"$list"

	for e in "${array[@]}"; do
		char_first=${e:0:1}
		char_last=${e: -1}

		if [ "$char_first" = "*" ] && [ "$char_last" = "*" ]; then
			if [[ "$needle" == *"${e:1:-1}"* ]]; then
				match="yes"
			fi
		elif [ "$char_first" = "*" ]; then
			if [[ "$needle" == *"${e:1}" ]]; then
				match="yes"
			fi
		elif [ "$char_last" = "*" ]; then
			if [[ "$needle" == "${e:0:-1}"* ]]; then
				match="yes"
			fi
		else
			if [[ "$needle" == "$e" ]]; then
				match="yes"
			fi
		fi
	done

	echo "$match"
}

function command_upgrade {
	local SELECT_UPGRADE_TYPE="$1"
	local SELECT_PACKAGE_TYPE="$2"
	local DEBUG="$3"
	local CONFIRM="$4"
	local EXCLUDES="$5"
	local INCLUDES="$6"
	local HEADER_FOUND=0
	local UPGRADE_TYPE

	yarn outdated | while read -r line; do
		if [[ 'PackageCurrentWantedLatestPackageTypeURL' == "${line//[[:blank:]]/}" ]]; then
			HEADER_FOUND=1
			continue
		fi

		if [[ $HEADER_FOUND -ne 1 ]]; then
			continue
		fi

		IFS=' ' read -r -e -a parts <<<"$line"

		if [[ ${#parts[@]} -ne 6 ]]; then
			continue
		fi

		local PACKAGE_NAME="${parts[0]}"
		local CURRENT_VERSION="${parts[1]}"
		local TARGET_VERSION="${parts[3]}"
		local PACKAGE_TYPE="${parts[4]}"

		if [ "$SELECT_PACKAGE_TYPE" != "all" ] && [ "$PACKAGE_TYPE" != "$SELECT_PACKAGE_TYPE" ]; then
			echo -e "${color_red}✗${color_clear} Skipping upgrade for ${color_green}${PACKAGE_NAME}${color_clear}. Package type is not match: ${color_green}${PACKAGE_TYPE}${color_clear}"
			continue
		fi

		if [[ -n $EXCLUDES ]]; then
			match=$(match_pattern "$PACKAGE_NAME" "${EXCLUDES}")

			if [ "$match" == "yes" ]; then
				echo -e "${color_red}✗${color_clear} Skipping upgrade for ${color_green}${PACKAGE_NAME}${color_clear}. Package is listed in exclude list: ${color_green}${EXCLUDES}${color_clear}"
				continue
			fi
		fi

		if [[ -n $INCLUDES ]]; then
			match=$(match_pattern "$PACKAGE_NAME" "${INCLUDES}")

			if [ "$match" != "yes" ]; then
				echo -e "${color_red}✗${color_clear} Skipping upgrade for ${color_green}${PACKAGE_NAME}${color_clear}. Package is not listed in include list: ${color_green}${INCLUDES}${color_clear}"
				continue
			fi
		fi

		if [ "$CONFIRM" == "yes" ]; then
			echo
			read -r -u 2 -p "Press ENTER key to upgrade $PACKAGE_NAME package to version $TARGET_VERSION or input the version manually: " CUSTOM_VERSION

			TARGET_VERSION=${CUSTOM_VERSION:-"$TARGET_VERSION"}
		fi

		if ! [[ "$CURRENT_VERSION" =~ $SEMVER_REGEX ]]; then
			echo -e "${color_red}✗${color_clear} Skipping upgrade for ${color_green}${PACKAGE_NAME}${color_clear}. Package current version is invalid: ${color_green}${CURRENT_VERSION}${color_clear}"
			continue
		fi

		if ! [[ "$TARGET_VERSION" =~ $SEMVER_REGEX ]]; then
			echo -e "${color_red}✗${color_clear} Skipping upgrade for ${color_green}${PACKAGE_NAME}${color_clear}. Package target version is invalid: ${color_green}${TARGET_VERSION}${color_clear}"
			continue
		fi

		UPGRADE_TYPE=$(command_diff "$CURRENT_VERSION" "$TARGET_VERSION")

		if [ "$SELECT_UPGRADE_TYPE" != "all" ] && [ "$UPGRADE_TYPE" != "$SELECT_UPGRADE_TYPE" ]; then
			echo -e "${color_red}✗${color_clear} Skipping upgrade for ${color_green}${PACKAGE_NAME}${color_clear}. Upgrade type is not match: ${color_green}${UPGRADE_TYPE}${color_clear}"
			continue
		fi

		if [ "$TARGET_VERSION" == "$CURRENT_VERSION" ]; then
			echo -e "${color_red}✗${color_clear} Skipping upgrade for ${color_green}${PACKAGE_TYPE}${color_clear}. Package version is the same: ${color_green}${CURRENT_VERSION}${color_clear}"
			continue
		fi

		echo -e "${color_green}✓${color_clear} Upgrading ${color_green}${PACKAGE_NAME}${color_clear} version ${color_green}${CURRENT_VERSION}${color_clear} to ${color_green}${TARGET_VERSION}${color_clear}"

		if [ "$DEBUG" != "yes" ]; then
			yarn upgrade "${PACKAGE_NAME}@${TARGET_VERSION}"
		fi
	done
}

run_command() {
	local UPGRADE_TYPE_LIST=(major minor patch release prerel build all)
	local PACKAGE_TYPE_LIST=(dependencies devDependencies all)
	local CONFIRM_LIST=(yes no)
	local DEBUG_LIST=(yes no)

	local UPGRADE_TYPE="all"
	local PACKAGE_TYPE="all"
	local DEBUG="no"
	local CONFIRM="no"
	local WIZARD="no"
	local EXCLUDES=""
	local INCLUDES=""

	while (("$#")); do
		case $1 in
		-h | --help)
			usage_help
			exit
			;;

		-w | --wizard)
			WIZARD="yes"
			shift
			;;

		-d | --debug)
			DEBUG="yes"
			shift
			;;

		-c | --confirm)
			CONFIRM="yes"
			shift
			;;

		-u | --upgrade_type)
			UPGRADE_TYPE="$2"
			shift 2
			;;

		-p | --package_type)
			PACKAGE_TYPE="$2"
			shift 2
			;;

		-e | --excludes)
			EXCLUDES="$2"
			shift 2
			;;

		-i | --includes)
			INCLUDES="$2"
			shift 2
			;;

		*)
			echo "ERROR: Unknown parameter \"$1\""
			usage_help
			exit 1
			;;
		esac
	done

	# Upgrade Type
	if ! [[ "${UPGRADE_TYPE_LIST[*]}" =~ $UPGRADE_TYPE ]] || [ $WIZARD == "yes" ]; then
		echo "Upgrade type? "
		select selected in "${UPGRADE_TYPE_LIST[@]}"; do
			if [[ -n $selected ]]; then
				UPGRADE_TYPE=$selected
				break
			fi
		done
	fi

	# Package Type
	if ! [[ "${PACKAGE_TYPE_LIST[*]}" =~ $PACKAGE_TYPE ]] || [ $WIZARD == "yes" ]; then
		echo "Package type? "
		select selected in "${PACKAGE_TYPE_LIST[@]}"; do
			if [[ -n $selected ]]; then
				PACKAGE_TYPE=$selected
				break
			fi
		done
	fi

	# Confirm before upgrade
	if ! [[ "${CONFIRM_LIST[*]}" =~ $CONFIRM ]] || [ $WIZARD == "yes" ]; then
		echo "Confirm before upgrade? "
		select selected in "${CONFIRM_LIST[@]}"; do
			if [[ -n $selected ]]; then
				CONFIRM=$selected
				break
			fi
		done
	fi

	# Debug mode
	if ! [[ "${DEBUG_LIST[*]}" =~ $DEBUG ]] || [ $WIZARD == "yes" ]; then
		echo "Debug mode? "
		select selected in "${DEBUG_LIST[@]}"; do
			if [[ -n $selected ]]; then
				DEBUG=$selected
				break
			fi
		done
	fi

	# Excludes
	if [ $WIZARD == "yes" ]; then
		read -r -u 2 -p "Exclude upgrade for specified packages (separated by comma): " EXCLUDES
	fi

	if [ $WIZARD == "yes" ]; then
		read -r -u 2 -p "Include upgrade for specified packages (separated by comma): " INCLUDES
	fi

	echo
	echo -e "➤ Package.json           : $(pwd)/package.json"
	echo -e "➤ Upgrade Type           : $UPGRADE_TYPE"
	echo -e "➤ Package Type           : $PACKAGE_TYPE"
	echo -e "➤ Debug Mode             : $DEBUG"
	echo -e "➤ Confirm Before Upgrade : $CONFIRM"
	echo -e "➤ Exclude Packages       : $EXCLUDES"
	echo -e "➤ Include Packages       : $INCLUDES"
	echo

	command_upgrade "$UPGRADE_TYPE" "$PACKAGE_TYPE" "$DEBUG" "$CONFIRM" "$EXCLUDES" "$INCLUDES"
}

run_command "$@"
